#!/usr/bin/env python3

#
# Copyright (C) 2018 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)


import bridge.debug_bridge as db
import argparse
import code
import imp
import os.path

try:
  import plptree
except:
  pass

import json_tools as js

try:
  from IPython import embed
except:
  pass



class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def fatal_error(error):
    print (bcolors.FAIL + 'FATAL ERROR: ' + error + bcolors.ENDC)


def read(bridge):
    if args.addr == None:
        raise Exception('Access address must be given through option --addr when using command "read"')

    addr = int(args.addr, 0)
    size = int(args.size, 0)

    if args.verbose >= 4:
        print ('Read access command (addr: 0x%x, size: 0x%x)' % (addr, size))

    data = bridge.read(addr=addr, size=size)

    while size > 0:
        line = '%8.8x: ' % addr
        for i in range(0, 16):
            line += '%2.2x ' % (int.from_bytes(data.pop(0), byteorder='little'))
            size -= 1
            addr += 1
            if size == 0:
                break
        print (line)

    return 0



def write(bridge):
    if args.addr == None:
        raise Exception('Access address must be given through option --addr when using command "write"')

    if args.value == None:
        raise Exception('Access value must be given through option --value when using command "write"')

    addr = int(args.addr, 0)
    size = int(args.size, 0)
    value = int(args.value, 0)

    if args.verbose >= 4:
        print ('Write access command (addr: 0x%x, size: 0x%x, value: 0x%x)' % (addr, size, value))

    bridge.write(addr=addr, size=size, buffer=value.to_bytes(size, byteorder='little'))

    return 0


def load(bridge):
    if args.verbose >= 4:
        print ('Loading ELF binaries (path: %s)' % ' '.join(binaries))

    return bridge.load()


def ioloop(bridge):
    if args.verbose >= 4:
        print ('Lauching IO loop')

    return bridge.ioloop()


def reqloop(bridge):
    if args.verbose >= 4:
        print ('Lauching req loop')

    return bridge.reqloop()


def gdb(bridge):
    if args.verbose >= 4:
        print ('Lauching GDB server')

    return bridge.gdb(int(args.rsp_port))


def start(bridge):
    if args.verbose >= 4:
        print ('Starting execution')

    return bridge.start()


def wait(bridge):
    if args.verbose >= 4:
        print ('Waiting termination')

    return bridge.wait()

def flash(bridge):
    if args.verbose >=4:
        print("Flashing the flash image")

    return bridge.flash()


def reset(bridge):
    if args.verbose >= 4:
        print ('Chip reset')

    return bridge.reset()


def script(bridge):

    for script in args.scripts:
        if args.verbose >= 4:
            print ('Executing script: ' + script)

        if script.find('@') == -1:
            script_name = script
            script_entry = "debug_bridge_entry"
        else:
            script_entry, script_name = script.split('@')

        module = imp.load_source("user_script", script_name)

        entry = getattr(module, script_entry)
        entry(bridge)

    return 0



commands = {
  'read'    : ['Read data from the target',         read],
  'write'   : ['Write data to the target',          write],
  'load'    : ['Load a binary into the target',     load],
  'ioloop'  : ['Activate IO loop',                  ioloop],
  'reqloop' : ['Activate request loop',             reqloop],
  'gdb'     : ['Open RSP server for GDB connection',gdb],
  'start'   : ['Start execution',                   start],
  'flash'   : ['Flash the flash image',             flash],
  'wait'    : ['Wait termination',                  wait],
  'reset'   : ['Chip reset',                        reset],
  'script'  : ['Execute user scripts',              script],
}


command_help = """Available commands:
"""

for name, cmd in commands.items():
  command_help += '  %-10s %s\n' % (name, cmd[0])

parser = argparse.ArgumentParser(description='Control a pulp target',
  epilog=command_help, formatter_class=argparse.RawDescriptionHelpFormatter, add_help=False
)

parser.add_argument('command', metavar='CMD', type=str, nargs='*',
                   help='a command to be executed (see the command help afterwards)')

parser.add_argument("--script", dest="scripts", default=[], action="append", help="Specify a script to be executed with the script command")
parser.add_argument("--config", dest="config", default=None, help="Specify the system configuration")
parser.add_argument("--ipython", dest="ipython", action="store_true", help="Enter ipython shell")
parser.add_argument("--shell", dest="shell", action="store_true", help="Enter python shell")
parser.add_argument("--port", dest="port", type=int, default=-1, help="Specify port for proxy mode")
parser.add_argument("--debug", dest="debug", action='store_true', default=False, help="Activate debug mode for this script")
parser.add_argument("--verbose", dest="verbose", type=int, default=3, help="Verbose mode")
parser.add_argument("--help", dest="help", action='store_true', default=False, help="Dump help")
parser.add_argument("--cable", dest="cable", default=None, help="Specify cable")
parser.add_argument("--chip", dest="chip", default=None, help="Specify target chip")
parser.add_argument("--binary", dest="binaries", default=[], action="append", help="Specify a binary to be loaded by the load command")
parser.add_argument("--fimage", dest="fimages", default=[], action="append", help="Specify a flash image to be flashed")

[args, otherArgs] = parser.parse_known_args()

if 'read' in args.command or 'write' in args.command:
  parser.add_argument("--addr", dest="addr", default=None, help="Specify the address of the access for read and write commands")
  parser.add_argument("--size", dest="size", default="4", help="Specify the size of the access for read and write commands")

if 'write' in args.command:
  parser.add_argument("--value", dest="value", default=None, help="Specify the value to be written for write command")

if 'gdb' in args.command:
  parser.add_argument("--rsp-port", dest="rsp_port", default=1234, help="Specify the port number that the RSP will use to open a socket for GDB connection")

parser.add_argument("--boot-mode", dest="boot_mode", default=None, help="Specify the boot mode")

args = parser.parse_args()

if args.help:
    parser.print_help()
    exit(0)


cable_option = None
if args.port != -1:
  cable_option = "--port=%d" % (args.port)


config_path = args.config


# First get the json configuration
if config_path is not None:
    # Either it is specified and then just process it, everything is specified
    # inside and all arguments are ignored
    config = js.import_config_from_file(config_path)
elif args.chip is not None:
    # Or a chip is given, in this case, import the configuration for this chip
    try:
        configs = plptree.get_configs_from_env(configs=["system=%s" % args.chip])
        config = js.import_config(configs[0].get_dict())
    except:
        config = js.import_config({"debug-bridge": {}, "pulp_chip": { args.chip: { "name": args.chip } } })

    with open('myconfig.json', 'w') as file:
        file.write(config.dump_to_string())

    # And overloads it with the specified options
    if args.boot_mode is not None:
        config.get('**/debug-bridge').set('boot-mode', args.boot_mode)
    if args.cable is not None:
        config.get('**/debug-bridge').set('cable/type', args.cable)


else:
    raise Exception('A chip or a config file must be specified')

# Need to flash the flash image and boot from flash
if args.boot_mode == "jtag_hyper":
    binaries= [os.environ["INSTALL_DIR"] + "/bin/flasher"]
# Need to flash the flash image and still boot from jtag
elif args.fimages != []:
    binaries= [os.environ["INSTALL_DIR"] + "/bin/flasher"] + args.binaries
# boot from jtag
else:
    binaries = args.binaries

bridge = db.get_bridge(config=config, verbose=args.verbose, binaries=binaries, fimages=args.fimages)

if args.ipython:
  embed()

if args.shell:
  code.interact(local=locals())

#bridge.exec_config()





def handle_commands(bridge):
    if len(args.command) == 0:
        parser.print_help()
        exit(0)

    else:
        for cmd in args.command:

            if commands.get(cmd) is None:
                fatal_error('Unknown command: ' + cmd)
                exit(1)
            else:
                try:
                    if commands.get(cmd)[1](bridge) != 0:
                        print ()
                        fatal_error('the command \'%s\' has failed' % (cmd))
                except Exception as e:
                    fatal_error('the command \'%s\' has failed with an exception: %s' % (cmd, e))
                    if args.debug:
                        raise
                    exit(1)





handle_commands(bridge)
